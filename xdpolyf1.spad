)abbrev package XDPOLYF1 XDistributedPolynomialFunctions1

XDistributedPolynomialFunctions1(ALPHABET:List Symbol, F:Join(IntegralDomain,GcdDomain)):Exports == Implementation where
  ++ Factorization of non-commutative polynomials in the
  ++ free associative algebra XDPOLY using an ansatz
  ++ Idea: Daniel Smertnig, January 26, 2017
  ++ Test: Konrad Schrempf, Mit 2018-07-04 10:33
  ++ Author: Bill Page, July 11, 2018
  OVL ==> OrderedVariableList ALPHABET
  OFM ==> FreeMonoid OVL
  G   ==> Fraction Polynomial F
  XDP ==> XDistributedPolynomial(OVL, F)
  YDP ==> XDistributedPolynomial(OVL, G)
  NNI ==> NonNegativeInteger
  RF  ==> RationalFunction F

  Exports ==> with
    factorizationEquations : XDP -> List G
    factor:XDP -> List XDP
    --mapPoly2XDP:YDP -> XDP
    leftPoly:XDP -> YDP
    rightPoly:XDP -> YDP
    --prune:(List Symbol, List G) -> List Equation G
    eval:(List G,List Equation G) -> List G

  Implementation ==> add
    import ListFunctions2(OFM, List OFM)
    import ListFunctions3(G, OFM, YDP)
    import ListFunctions2(G,List Symbol)
    import ListFunctions2(Equation G,Boolean)
    import ListFunctions2(Equation G, G)
    import ListFunctions2(G, Polynomial F)
    import ListFunctions2(Polynomial F, G)
    import ListFunctions2(G, G)
    import GroebnerPackage(F, IndexedExponents(Symbol), Polynomial F)
    import OutputPackage

    mapPoly(p:XDP):YDP ==
      if reductum p = 0 then
        return monomial(leadingCoefficient(p)::Polynomial(F)::G,leadingSupport p)
      else
        return mapPoly(reductum p)+monomial(leadingCoefficient(p)::Polynomial(F)::G,leadingSupport p)

    mapPoly2XDP(p:YDP):XDP ==
      if reductum p = 0 then
        return monomial(retract(retract(leadingCoefficient(p))$G@Polynomial F)@F,leadingSupport(p))
      else
        return mapPoly2XDP(reductum p)+monomial(retract(retract(leadingCoefficient(p))$G@Polynomial F)@F,leadingSupport p)

    last(x:OFM,n:NNI):OFM == if n >= length x then x else last(rest x,n)
    first(x:OFM,n:NNI):OFM == mirror last(mirror x,n)
    prefixes(x:OFM):List OFM == [first(x,i) for i in 0..length(x)-1]
    suffixes(x:OFM):List OFM == [last(x,i) for i in 0..length(x)-1]
    leftSubwords(x:XDP):List OFM ==
      members set(concat map(prefixes,support x))$Set(OFM)
    rightSubwords(x:XDP):List OFM ==
      members set(concat map(suffixes,support x))$Set(OFM)
    terms(s:Symbol,w:List OFM):List YDP ==
      map(monomial,[coerce subscript(s,[outputForm i]) for i in 1..#w],w)
    leftPoly(x:XDP):YDP ==  reduce(_+,terms('a,leftSubwords(x)))
    rightPoly(x:XDP):YDP == reduce(_+,terms('b,rightSubwords(x)))

    factorizationEquations(p:XDP) : List G ==
      coefficients(leftPoly p * rightPoly p - mapPoly p)

    vars(p:YDP):List Symbol ==
      members set(concat map(x+->concat(variables numer x,variables denom x),
        coefficients p))$Set(Symbol)

    eval(e:List G,z:List Equation G):List G ==
      remove(0,map((x:G):G+->eval(x,z)$RF,e))

    bisect(z:List Equation G, e:List G):List Equation G ==
      if #z<2 then return z
      z1 := first(z,#z quo 2)
      if groebner(map(numer,eval(e,z)))~=[1] then return z1
      z1 := last(z,#z quo 2)
      if groebner(map(numer,eval(e,z)))~=[1] then return z1
      if not empty?(z1 := bisect(first(z,#z quo 2),e)) then return z1
      if not empty?(z1 := bisect(last(z,#z quo 2),e)) then return z1
      -- A theorem showing that this can not happen would be nice!
      output("Warning: bisection failed")
      return []

    constant(x:G):Boolean == retractIfCan(numer x)@Union(F,"failed") case F

    explicit(x:Equation G):Boolean ==
      retractIfCan(lhs x)@Union(Symbol,"failed") case Symbol

    prune(l:List Symbol, e:List G):List Equation G ==
      -- prune equations, a heuristic to solve for zeros
      z: List Equation G := []
      e1a := e
      for i in l repeat
        try_a: List Equation G := [coerce i = 0]
        e1b:=eval(e1a, try_a) -- map((x:G):G+->eval(x,try_a)$RF,e1a)
        -- if setting a variable to 0 makes some equations 0
        if #e1b < #e1a then
          -- but none of them to other non-zero constants
          if empty? select(constant,e1b) then
            e1a := e1b
            z := concat(z,try_a)
      return z

    factor(p:XDP):List XDP ==
      lp := leftPoly p
      rp := rightPoly p
      l := vars lp
      r := vars rp
      e := factorizationEquations p
      -- find left factor variables that can (probably) be set to zero
      lz := prune(l,e)
      -- Check consistency: The heuristic sometimes yields too many zeros.
      e1 := remove(0,map((x:G):G+->eval(x,lz)$RF,e)) --> eval(e,lz) -- compiler bug?
      if groebner(map(numer,e1))=[1] then
        lz := bisect(lz,e)
        e1 := eval(e,lz)
      -- solve for other variables
      v := members set(concat map(variables, e1))$Set(Symbol)
      s0: List Equation G := []
      -- look for first explicit solution with one free parameter
      -- A theorem showing that we only need one parameter would be nice!
      while empty? s0 for fp in v repeat
        --output("try: ", fp::OutputForm)
        s := solve(e1,remove(fp,v))$SystemSolvePackage(F)
        while empty? s0 for s1 in s repeat
          m := map(explicit, s1)
          if #s1>0 and reduce(_and$Boolean, m) then s0:=s1
      --output("s0: ",s0::OutputForm)
      if empty? s0 then
        return [p]
      sz := concat(lz,s0)

      -- choose a parameter value to make G retractable to F
      g := select((x:G):Boolean+->(denominator x = fp::G), map(rhs,s0))
      f := equation(fp::G,gcd(map(numer, g))::G)

      fl := mapPoly2XDP map((x:G):G+->eval(eval(x,sz),f)$RF,lp)
      fr := mapPoly2XDP map((x:G):G+->eval(eval(x,sz),f)$RF,rp)
      fs := concat [factor fl, factor fr]
      if reduce(_*$XDP,fs) ~= p then
        output("factors: ", fs::OutputForm)
        error "factor failed"
      return fs
